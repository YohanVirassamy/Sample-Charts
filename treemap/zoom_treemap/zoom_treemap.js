// Generated by CoffeeScript 1.9.0
(function() {
  $(document).ready(function() {
    var childEnterTransition, childUpdateTransition, children, childrenCells, data, nodes, parentCells, parentEnterTransition, parentUpdateTransition, parents;
    data = zoom_treemap;
    window.height = 500;
    window.width = 500;
    window.xscale = d3.scale.linear().range([0, width]);
    window.yscale = d3.scale.linear().range([0, height]);
    window.color = d3.scale.category10();
    window.headerHeight = 20;
    window.headerColor = "#555555";
    window.transitionDuration = 500;
    window.treemap = d3.layout.treemap().round(false).size([width, height]).sticky(true).value(function(d) {
      return d.size;
    });
    window.chart = d3.select("#body").append("svg:svg").attr("width", width).attr("height", height).append("svg:g");
    window.node = window.root = data;
    nodes = treemap.nodes(root);
    children = nodes.filter(function(d) {
      return !d.children;
    });
    parents = nodes.filter(function(d) {
      return d.children;
    });
    parentCells = chart.selectAll("g.cell.parent").data(parents, function(d) {
      return "p-" + d.name;
    });
    parentEnterTransition = parentCells.enter().append("g").attr("class", "cell parent").on("click", function(d) {
      zoom(d);
    }).append("svg").attr("class", "clip").attr("width", function(d) {
      return Math.max(0.01, d.dx);
    }).attr("height", headerHeight);
    parentEnterTransition.append("rect").attr("width", function(d) {
      return Math.max(0.01, d.dx);
    }).attr("height", headerHeight).style("fill", headerColor);
    parentEnterTransition.append("text").attr("class", "label").attr("id", function(d) {
      return d.dy;
    }).attr("transform", "translate(3, 13)").attr("width", function(d) {
      return Math.max(0.01, d.dx);
    }).attr("height", headerHeight).text(function(d) {
      return d.name;
    });
    parentUpdateTransition = parentCells.transition().duration(transitionDuration);
    parentUpdateTransition.select(".cell").attr("transform", function(d) {
      return "translate(" + d.dx + "," + d.y + ")";
    });
    parentUpdateTransition.select("rect").attr("width", function(d) {
      return Math.max(0.01, d.dx);
    }).attr("height", headerHeight).style("fill", headerColor);
    parentUpdateTransition.select(".label").attr("transform", "translate(3, 13)").attr("width", function(d) {
      return Math.max(0.01, d.dx);
    }).attr("height", headerHeight).text(function(d) {
      return d.name;
    });
    parentCells.exit().remove();
    childrenCells = chart.selectAll("g.cell.child").data(children, function(d) {
      return "c-" + d.name;
    });
    childEnterTransition = childrenCells.enter().append("g").attr("class", "cell child").on("click", function(d) {
      zoom(node === d.parent ? root : d.parent);
    }).append("svg").attr("class", "clip");
    childEnterTransition.append("rect").classed("background", true).style("fill", function(d) {
      return color(d.parent.name);
    });
    childEnterTransition.append("text").attr("class", "label").attr("x", function(d) {
      return d.dx / 2;
    }).attr("y", function(d) {
      return d.dy / 2;
    }).attr("dy", ".35em").attr("text-anchor", "middle").style("display", "none").text(function(d) {
      return d.name;
    });
    childUpdateTransition = childrenCells.transition().duration(transitionDuration);
    childUpdateTransition.select(".cell").attr("transform", function(d) {
      return "translate(" + d.x + "," + d.y + ")";
    });
    childUpdateTransition.select("rect").attr("width", function(d) {
      return Math.max(0.01, d.dx);
    }).attr("height", function(d) {
      return d.dy;
    }).style("fill", function(d) {
      return color(d.parent.name);
    });
    childUpdateTransition.select(".label").attr("x", function(d) {
      return d.dx / 2;
    }).attr("y", function(d) {
      return d.dy / 2;
    }).attr("dy", ".35em").attr("text-anchor", "middle").text(function(d) {
      return d.name;
    });
    childrenCells.exit().remove();
    d3.select("select").on("change", function() {
      console.log("select zoom(node)");
      treemap.value(this.value === "size" ? size : count).nodes(root);
      zoom(node);
    });
    zoom(node);
  });

}).call(this);
